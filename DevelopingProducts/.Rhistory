summary(lmBoth)
lmInter<-lm(Numeric~Year + Sex + Sex*Year, hunger)
summary(lmInter)
fit<-(y~x, out2)
fit<-lm(y~x, out2)
plot(fit, which = 1)
fitno<-lm(y~x[-1], out2)
fitno<-lm(y~x[-1,], out2)
fitno<-lm(y~x, out2)
fitno <- lm(y ~ x, out2[-1, ])
plot(fitno, which = 1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
2
sigma <- sqrt(deviance(fit)/df.residual(fit))
s
3
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
2
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
2
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
3
head(rstudent(fit))
predict(fitno, out2)-predict(fit, out2)
dy <- predict(fitno, out2)-predict(fit, out2)
3
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
data(mtcars)
str(mtcars)
regressin<-lm(mpg~ factor(cyl)+wt, mtcars)
summary(regressin)
reg2<-lm(mpg ~ factor(cyl), mtcars)
summary(rreformulate())
summary(reg2)
fit_interaction <- lm(mpg ~ cyl + wt + cyl:wt, mtcars)
summary(fit_interaction)
anova(regressin, fit_interaction, test="Chisq")
fit_interaction <- lm(mpg ~ factor(cyl)*wt, mtcars)
anova(regressin, fit_interaction, test="Chisq")
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
regre<- lm(y~x)
hatvalues(regre)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
regre<-lm(y~x)
dfbeta(regre)
dfbeta(regre)$slope
dfbetas(regre)[, 2]
dfbeta(regre)
swirl()
rgp1()
rgp2()
head(swiss)
mdl<-lm(Fertility~., swiss)
vif(mdl)
mdl2<-lm(Fertility ~ Agriculture + Education + Catholic + Infant.Mortality, swiss )
vif(mdl2)
x1c<-simbias()
apply(x1c, 1, mean)
fit1<-lm(Fertility ~Agriculture, swiss)
fit3<-lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
deviance(fit3)
dz<- deviance(fit3)/43
d<- deviance(fit3)/43
n<-deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
msl<-glm(ravenWinNum ~ ravenScore, family = "binomial", ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds<-predict(mdl, data.frame(ravenScore=c(0, 3, 6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
2
exp(confint(mdl))
anova(mdl)
qchisq(0.95, 1)
var(rpois(1000, 50))
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,"date"]))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, "date")
exp(confint(mdl, 'date'))
which.max(hits[,'visits'])
hits[704,]
mdl$fitted.values[704]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
2
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
library(MASS)
data("shuttle")
summary(shuttle)
2.6741/2.7300
35.274443/37.031917
0.07580980/0.07372098
2.6741486/2.7300291
1.448048e-272/3.510670e-300
data("mtcars")
summary(mtcars)
str(mtcars)
str(mtcars)
?step
?anova
knitr::opts_chunk$set(echo = TRUE)
data("mtcars")
str(mtcars)
boxplot(mpg~am,col=c("blue","green"),main="Boxplot of MPG vs Transmission",xlab="Transmission (0=Automatic,1=Manual)",ylab="MPG")
boxplot(mpg~am,col=c("blue","green"),main="Boxplot of MPG vs Transmission",xlab="Transmission (0=Automatic,1=Manual)",ylab="MPG")
boxplot(mpg~am,col=c("blue","green"),main="Boxplot of MPG vs Transmission",xlab="Transmission (0=Automatic,1=Manual)",ylab="MPG", data = mtcars)
mtcars$drat <- factor(mtcars$drat)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
boxplot(mpg~am,col=c("blue","green"),data= mtcars, main="Boxplot of MPG vs Transmission",xlab="Transmission (0=Automatic,1=Manual)",ylab="MPG")
knitr::opts_chunk$set(echo = TRUE)
data("mtcars")
str(mtcars)
mtcars$drat <- factor(mtcars$drat)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
mtcars$am <- factor(mtcars$am,labels=c('Automatic','Manual'))
boxplot(mpg~am,col=c("blue","green"),data= mtcars, main="Boxplot of MPG vs Transmission",xlab="Transmission (0=Automatic,1=Manual)",ylab="MPG")
boxplot(mpg~am,col=am, data= mtcars, main="Boxplot of MPG vs Transmission",xlab="Transmission (0=Automatic,1=Manual)",ylab="MPG")
boxplot(mpg~am,col="am", data= mtcars, main="Boxplot of MPG vs Transmission",xlab="Transmission (0=Automatic,1=Manual)",ylab="MPG")
boxplot(mpg~am, col=mtcars$am, data= mtcars, main="MPG vs Transmission",xlab="Transmission (Automatic, Manual)",ylab="MPG")
boxplot(mpg~am, data= mtcars, main="MPG vs Transmission",xlab="Transmission",ylab="MPG")
par(mfrow=c(2,2))
plot(best_model,col="blue")
simple_model <- lm(mpg~am,data=mtcars) # Simple Model
summary(simple_model)
base_model <- lm(mpg~.,data=mtcars) # Including all variables
summary(base_model)
best_model <- step(base_model,direction="both") # Selecting the best model
summary(best_model)
par(mfrow=c(2,2))
plot(best_model,col="blue")
library(ggplot2)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(AppliedPredictiveModeling)
library(caret)
library(AppliedPredictiveModeling)
install.packages("caret")
install.packages("caret")
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
names(training
)
featurePlot(x = training[, 1:8], y = training$CompressiveStrength, plot = "pairs")
library(hmisc)
install.packages("Hmisc"")
""
install.packages("Hmisc")
str(concrete)
library(Hmisc)
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, color=index)) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[inTrain, ]
testing = mixtures[-inTrain, ]
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, col = colnames(training) )) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, col = colnames(training)) + geom_point() +
theme_bw()
)
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, col = colnames(training))) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, col = colnames())) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, col = colnames(training))) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, color = colnames(training))) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, color = names)) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, col = names)) + geom_point() +
theme_bw()
names<-colnames(training)
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, col = names)) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength, color = names)) + geom_point() +
theme_bw()
index <- seq_along(1:nrow(training))
ggplot(data = training, aes(x = index, y = CompressiveStrength)) + geom_point() +
theme_bw()
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433); data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]] ;training = adData[ inTrain,]
testing = adData[-inTrain,]
cor<-cor(AlzheimerDisease)
AlzheimerDisease
names(training)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
modelfit<- train(Area~.,method="rpart", olive)
newdata = as.data.frame(t(colMeans(olive)))
prediction<-predict(modelfit,newdata)
prediction
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
rm(list=ls())
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
?ts
install.packages("leaflet")
swtwd("C:/Users/User/Desktop/Data Analysis Especialization/9. Developing Data Product in R")
setwd("C:/Users/User/Desktop/Data Analysis Especialization/9. Developing Data Product in R")
data<-read.csv("Project.csv", head=TRUE)
getwd()
ls()
data<-read.csv("Petroleum.cvs", head=TRUE)
data<-read.csv("Petroleum.csv", head=TRUE)
data<-read.csv("Petroleum.xlsx", head=TRUE)
data<-read.csv("Petrelum.xlsx", head=TRUE)
data<-read.csv("Petroelum.xlsx", head=TRUE)
data
data<-read.csv("Petroelum.xlsx")
data
data<-read.table("Petroelum.xlsx")
data
library(openxlsx)
data<-read.xlsx("Petroelum.xlsx")
data
class(data)
names(data)
lenght(data)
length(data)
dim(data)
str(data)
map<- data %>%
asd
names(data)<-c("Campo","Emptresa","Produccion", "lat","lng")
names(data)
map<- data %>%
leaf
library(leaflet)
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(data$Produccion)*30)
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(data$Produccion)*30, color = data$Emptresa)
map
data<-read.xlsx("Petroelum.xlsx")
names(data)<-c("Campo","Empresa","Produccion", "lat","lng")
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, color = data$Empresa)
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, color = data$Empresa) %>%
addLegend(labels = c(data$Empresa, data$Produccion))
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, color = data$Empresa) %>%
addLegend(labels = data$Produccion)
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, color = data$Empresa) %>%
addLegend(labels = data$Produccion, colors = data$Empresa)
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(), popup = data$Produccion) %>%
addCircles(weight = 1, radius = data$Produccion, color = data$Empresa) %>%
addLegend(labels = data$Produccion, colors = data$Empresa)
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(), popup = data$Produccion) %>%
addCircles(weight = 1, radius = data$Produccion)
map
?addMarkers
map<-data%>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = data$Produccion) %>%
addCircles(weight = 1, radius = data$Produccion)
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion)%>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = data$Produccion)
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion)%>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = data$Produccion)%>%
addPopups()
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion)%>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = data$Produccion)%>%
addPopups(popup = data&Produccion)
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion)%>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = c(200,500,800))%>%
addPopups(popup = data&Produccion)
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion)%>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = c("200","500","800"))%>%
addPopups(popup = data&Produccion)
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion)%>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = c("200","500","800", "900", "500"))
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = c("200","500","800", "900", "500"))
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = data$Empresa)%>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = c("200","500","800", "900", "500"))
map
data<-read.xlsx("Petroelum.xlsx")
names(data)<-c("Campo","Empresa","Produccion", "lat","lng")
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = data$Empresa)%>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = c("200","500","800", "900", "500"))
map
data<-read.xlsx("Petroelum.xlsx")
names(data)<-c("Campo","Empresa","Produccion", "lat","lng")
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = data$Empresa)%>%
addMarkers(clusterOptions = markerClusterOptions(), popupOption = c("200","500","800", "900", "500"))
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = c(data$Empresa, data$Produccion))%>%
addMarkers(clusterOptions = markerClusterOptions())
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = paste0("Empresa:", data$Empresa,"/n","Producción:",data$Produccion, "BOPD"))%>%
addMarkers(clusterOptions = markerClusterOptions())
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = paste0("Empresa:", data$Empresa,"\n","Producción:",data$Produccion, "BOPD"))%>%
addMarkers(clusterOptions = markerClusterOptions())
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = paste0("Empresa:", data$Empresa,"\\","Producción:",data$Produccion, "BOPD"))%>%
addMarkers(clusterOptions = markerClusterOptions())
map
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = paste0("Empresa:", data$Empresa,"\n","Producción:",data$Produccion, "BOPD", sep= " "))%>%
addMarkers(clusterOptions = markerClusterOptions())
map
data<-read.xlsx("Petroelum.xlsx")
names(data)<-c("Campo","Empresa","Produccion", "lat","lng")
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = paste0("Company:", data$Empresa,"\n","Oil Production:",data$Produccion, "BOPD", sep= " "))%>%
addMarkers(clusterOptions = markerClusterOptions())
data<-read.xlsx("Petroelum.xlsx")
names(data)<-c("Campo","Empresa","Produccion", "lat","lng")
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = paste0("Company:", data$Empresa,"\n","Oil Production:",data$Produccion, "BOPD", sep= " "))%>%
addMarkers(clusterOptions = markerClusterOptions())
map
data<-read.xlsx("Petroelum.xlsx")
names(data)<-c("Campo","Empresa","Produccion", "lat","lng")
map<-data%>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = data$Produccion, popup = paste0("Company:", data$Empresa,"\n","Field:", data$Campo, "Oil Production:",data$Produccion, "BOPD", sep= " "))%>%
addMarkers(clusterOptions = markerClusterOptions())
map
